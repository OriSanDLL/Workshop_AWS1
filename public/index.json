[
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/",
	"title": "Approaches to layered security for Amazon VPC",
	"tags": [],
	"description": "",
	"content": "Multi-layer Security Approaches for Amazon VPC Purpose In this Workshop, practical guidance for securing Amazon VPC will be covered. It is aimed at cloud architects, system administrators, network administrators, and security administrators who are responsible for designing, developing, and running services in AWS.\nTherefore, you must know the basics such as subnets, security groups, VPC flow logs. The focus will be on the range of services and additional features that AWS provides to allow you to operate VPC securely. Here, AWS Network Firewall, VPC Network Access Analyzer, Amazon Route 53 Resolver DNS Firewall, AWS Systems Manager, Traffic Mirroring, AWS WAF, Gateway Load Balancer, etc., will be covered. IPv6 will also be used in some labs - but don\u0026rsquo;t worry, the Workshop is ready to help!\nAll examples given will follow best practices for securing, designing, and managing Amazon VPC. Ultimately, you should have an understanding of how and why each of these can be used, and the knowledge needed to apply what you have learned to your own environment.\nContent Workshop Overview Preparation Steps Track: DNS Security Track: Network Analysis Track: AWS Network Firewall (IPv6) Track: Third-Party Firewall using Gateway Load Balancer (GWLB) Track: Web Application Firewall Cleanup "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/1-introduce/1.1-architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": "Architecture Diagram An overview of the initial architecture is shown below: The workshop focuses on \u0026ldquo;LabVpc\u0026rdquo;, simulating infrastructure with two Availability Zones (AZ) and deploying four network layers: Public Subnets (PubSubnets): These have a default route to the Internet Gateway and contain a NAT Gateway, an Application Load Balancer (webAlb), and EC2 instances. Private Subnets (PriSubnets): These have a default route to the NAT gateways in the Public Subnets and contain an Auto Scaling Group for EC2 web servers and an EC2 instance to handle mirrored traffic (mirrorInstance). Isolated Subnets (EndSubnets): These have no default routes and contain PrivateLink endpoints for AWS services such as CloudFormation, CloudWatch, and Systems Manager. Firewall Subnets (FwSubnets): These do not have a default route yet but will use AWS Network Firewall later in the workshop. Some additional components have been pre-deployed, such as AWS Network Firewall, Amazon CloudFront (using webAlb as the origin), and CloudWatch Log Groups. Links to these resources can be found on the CloudWatch Dashboard after logging into the AWS workshop account or deploying the CloudFormation stack into a personal account.\nAdditional Infrastructure The workshop uses an additional VPC (ExtVpc) to simulate Internet-facing targets, containing public subnets and an Internet-facing ALB. This ALB provides a simple Lambda response for information retrieval.\nAdditionally, Lambda functions run every minute, triggered by an Amazon EventBridge rule, to monitor the workshop infrastructure status and check task completion.\nNo changes are required for any of these additional infrastructure components throughout the workshop.\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.2-labf/5.2.1-icmp/",
	"title": "Block outbound ICMP",
	"tags": [],
	"description": "",
	"content": "Detailed Instructions AWS Network Firewall uses two rules engines to inspect packets:\nStateless Engine: Inspects packets based on stateless rules. Actions: Can drop the packet, allow it to reach its destination, or forward it to the Stateful Engine. Stateful Engine: Inspects packets in the context of the traffic flow, based on stateful rules. Actions: Can drop the packet or allow it to reach its destination. Logging: Sends traffic and alert logs to firewall logs if logging is configured. Can send alerts for dropped packets and optionally for allowed packets. Configure Stateless Rule to Drop All ICMP Traffic Go to VPC: Navigate to Firewall Policies: In the AWS Management Console, open the VPC service. Select Firewall Policies: In the left menu, select Firewall policies under Network firewall. Select NFWPolicy: Find and select the NFWPolicy created in the initial setup. Create Stateless Rule Group: In the Stateless rule groups tab, click on Actions. Select Create stateless rule group. Enter the following values: Name: DropICMPv6 Capacity: 100 Under Add rule Protocol: Choose IPv6-ICMP and delete All Source: Any IPv6 address Destination: Any IPv6 address scroll down Actions: Drop Click Add rule Before clicking Next, make sure you see the newly created rule in the Rules section.\nClick Next for steps 4, 5 and Create rule group for step 5. Testing Remote Access via Session Manager ```markdown\rping6 tools.keycdn.com\r```\rIt will not return any responses.\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/3-dns-security/3.1-laba/3.1.1-wa/",
	"title": "Lab A Guide: Gaining visibility into VPC activity",
	"tags": [],
	"description": "",
	"content": "Make sure you are in the correct region Navigate to the AWS Console homepage. Ensure you are working in the correct region. Enable DNS Query Logging From the console homepage, click on the search box and type \u0026ldquo;Route 53\u0026rdquo;. From the Route 53 console, select the \u0026ldquo;Query logging\u0026rdquo; option from the left menu. Note - you may need to do this twice to avoid the Route 53 resolver splash page. Route 53 defaults to the US-East-1 region, so ensure you are working in the correct region. Click the “Configure query logging” button. Enter a name for the query logging configuration, such as netvpc, select CloudWatch Logs Log Group as the destination, and choose the \u0026ldquo;Route53Resolver\u0026rdquo; log group from the list. Scroll down and then click \u0026ldquo;Add VPC\u0026rdquo;. Select the \u0026ldquo;LabVpc\u0026rdquo; option and click Add. Add additional tags if desired. Click the \u0026ldquo;Configure query logging\u0026rdquo; button to enable query logging. You can now click on the configuration and then check if logging is working by following the \u0026ldquo;destination ARN\u0026rdquo; link. From the CloudWatch Logs page, you can view the log stream and check if query logs are being collected. Search Logs with CloudWatch Logs Insights To search through DNS query logs, we can use CloudWatch Logs Insights.\nFrom the console homepage, click on the search box and type \u0026ldquo;CloudWatch\u0026rdquo;. From the CloudWatch console, select the \u0026ldquo;Logs Insights\u0026rdquo; option from the left menu. From the dropdown list, select the \u0026ldquo;Route53Resolver\u0026rdquo; log group to query. Delete the sample query (3 lines) and replace it with: stats count(*) as numRequests by query_name | sort numRequests desc | limit 10 Run the query and view the results; note that if you just configured Query Logs, it may take a few minutes for results to appear. Note the result with \u0026ldquo;bad.sa-demos.net\u0026rdquo; - we will investigate this domain further and see which EC2 instances queried this domain. We will also count by record type to see if these queries are for IPv4 (A) or IPv6 (AAAA) records. Update the Log Insights query with the following code: filter query_name = \u0026#39;bad.sa-demos.net.\u0026#39; | stats count(*) as numRequests by srcids.instance, query_type, answers.0.Rdata as Response | sort numRequests desc | limit 10 Run the query and view the results. You will see an EC2 instance ID in the search results; this ID along with the suspicious domain name will be used in the next lab. Congratulations on completing Lab A!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/3-dns-security/3.1-laba/",
	"title": "Lab A: Gaining visibility into VPC activity",
	"tags": [],
	"description": "",
	"content": "Overview: Receive third-party notifications about suspicious activities coming from outside into your personal infrastructure. First task: Enable DNS query logging to capture DNS query requests. Objective: Identify the source and destination of the queries to investigate suspicious activities. This will assist in monitoring and handling security incidents related to DNS queries.\nStarting Point: Let\u0026rsquo;s consider how we can capture and log DNS queries in our VPC, and then how you can analyze those logs to look for suspicious activities. Some fields that will be useful for creating your own queries are:\nquery_name: the domain name being queried (e.g., test.example.com.) srcids.instance: the EC2 instance ID that made the query rcode: the response code generated by the Route 53 resolver to respond to the DNS query answers.0.Rdata: the response of the query (IPv4 or IPv6) Sample queries can be found here.\nPre-deployed Infrastructure There is a pre-configured Amazon Cloudwatch Log Group (\u0026quot;Route53Resolver\u0026quot;) that we can use when configuring DNS query logging. Make sure to check if your personal dashboard shows that you are working in the correct region for the workshop.\nServices Used Amazon Route 53 Resolver DNS Query Logging - Documentation Amazon CloudWatch Log Insights - Documentation Success Criteria You have successfully enabled DNS query logging for the LabVpc VPC.\nYou have identified the DNS name of an unknown website that you suspect is problematic.\nEnsure that all tasks identified on the Lab A CloudWatch Dashboard have been completed.\nTips To enable query logging\nQuery logs for the VPC can be found in the Amazon Route 53 Resolver section of the AWS console. + Make sure you have switched to the region where your workshop is running. To analyze query logs After you have logged the queries, you can start running queries against the data using CloudWatch Log Insights. Some fields that will be useful for creating your own queries are: query_name: the domain name being queried (e.g., \u0026ldquo;test.example.com.\u0026rdquo;) srcids.instance: the EC2 instance ID that made the query rcode: the response code generated by the Route 53 resolver to respond to the DNS query answers.0.Rdata: the response of the query (IPv4 or IPv6) Example queries can be found here If you are having trouble, we have created some pre-saved queries in the workshop - you can find them on the Log Insights page, on the right side, below the \u0026ldquo;Discovered Fields\u0026rdquo; button. Note that it may take a few minutes from enabling query logging to seeing results in CloudWatch Logs Insights - please be patient!\nLab A Architecture Lab A Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/3-dns-security/3.2-labb/3.2.1-wb/",
	"title": "Lab B Guide: Implementing a DNS firewall",
	"tags": [],
	"description": "",
	"content": "Make sure you are in the correct region Navigate to the AWS Console homepage. Ensure you are working in the correct region. Create Route 53 DNS Firewall Domain List From the console homepage, click on the search box and type VPC. From the VPC console, select the \u0026ldquo;Domain lists\u0026rdquo; option from the left menu. Ensure you are working in the correct region. Click the \u0026ldquo;Add domain lists\u0026rdquo; button. In the domain list creator, name the list (in our example, netvpc). Add bad.sa-demos.net. (note the period), then click \u0026ldquo;Add domain lists\u0026rdquo;. From here, you can use this domain list in the DNS Firewall rule group.\nCreate Route 53 DNS Firewall Rule Group From the Amazon VPC console, select the \u0026ldquo;Rule groups\u0026rdquo; option from the left menu (under the DNS Firewall section). Click the \u0026ldquo;Add rule group\u0026rdquo; button. For step 1, enter a name for the rule group (in my example, netvpc and a description if desired), then click Next. For step 2, click the \u0026ldquo;Add rules\u0026rdquo; button. Name the rule (in the example: block-bad-domain), choose to add your own domain list, and select the domain list you created in the previous steps. For the action, select \u0026ldquo;Block\u0026rdquo;, then choose \u0026ldquo;NXDOMAIN\u0026rdquo; as the preferred response. Click \u0026ldquo;Add rule\u0026rdquo;, then click Next. For step 3, keep the rule priority as is and click \u0026ldquo;Next\u0026rdquo;. For step 4, add tags if desired and click \u0026ldquo;Next\u0026rdquo;. In step 5, review the details and click \u0026ldquo;Create rule group\u0026rdquo;. From the rule group list, click on your newly created rule group and select \u0026ldquo;View details\u0026rdquo;. From the details page, click the \u0026ldquo;Associate VPCs\u0026rdquo; tab. Click \u0026ldquo;Associate VPC\u0026rdquo; and in the popup window, select the \u0026ldquo;LabVpc\u0026rdquo; option, then click Associate. Wait a few minutes for the association process to complete. Verify DNS Rule Group is Working You can verify if DNS resolution is failing by connecting to the publicInstance session manager - a quick link to do this can be found on the Lab B CloudWatch Dashboard - and once connected, try the command: nslookup bad.sa-demos.net.\nAnother approach is to check the CloudWatch Logs group; to do this, we can use a similar CloudWatch Logs Insights query as we used in Lab 2:\nNavigate to the CloudWatch console and select the \u0026ldquo;Logs Insights\u0026rdquo; option from the left menu. From the dropdown list, select the \u0026quot;Route53Resolver\u0026quot; log group to query. Delete the sample query (3 lines) and replace it with: filter query_name = \u0026#39;bad.sa-demos.net.\u0026#39; and rcode = \u0026#39;NXDOMAIN\u0026#39; | stats count(*) as numRequests by srcids.instance | sort numRequests desc | limit 10 Run the query and view the results. You will see the EC2 instance ID in the search results; this indicates that we have successfully blocked queries to that domain from that instance. Congratulations on completing Lab B!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/4-network-analysis/4.1-labc/4.1.1-wc/",
	"title": "Lab C Guide: Analysing VPC Network Configuration",
	"tags": [],
	"description": "",
	"content": "Make sure you are in the correct region Navigate to the AWS Console homepage. Ensure you are working in the correct region. Run Network Access Analyzer We can use Network Access Analyzer to automatically check any allowed access patterns according to the VPC network configuration. In this case, we will identify all traffic that can access EC2 from the Internet, except for traffic going through the WebAlb load balancer, as that is valid traffic.\nFrom the console homepage, click on the search box and type \u0026ldquo;Network Manager\u0026rdquo;. This is a feature of the VPC console. From the Network Manager console, select the \u0026ldquo;Network access analyzer\u0026rdquo; option from the left menu and click \u0026ldquo;Get started\u0026rdquo;. After a few minutes, a list of pre-configured network access scopes will appear. While we could use one of those, we will create our own network access scope. Click the \u0026ldquo;Create Network Access Scope\u0026rdquo; button, then select \u0026ldquo;Next\u0026rdquo;. Choose to start with a blank template, then select \u0026ldquo;Next\u0026rdquo;. Name the scope (in the example, netvpc) and select \u0026ldquo;Add Match condition\u0026rdquo;. \u0026ldquo;Match findings - condition 1\u0026rdquo; Source: Resource selection: \u0026ldquo;Resource IDs\u0026rdquo; Resource types: \u0026ldquo;InternetGateway\u0026rdquo; Resource ID: \u0026ldquo;LabVpc/IGW\u0026rdquo; \u0026ldquo;Match findings - condition 1\u0026rdquo; Destination: Resource selection: \u0026ldquo;Resource Types\u0026rdquo; Resource types: \u0026ldquo;AWS::EC2::Instance\u0026rdquo; \u0026ldquo;Add exclusion condition\u0026rdquo; Through: Resource selection: \u0026ldquo;Resource IDs\u0026rdquo; Resource types: \u0026ldquo;Elastic Load Balancers V2\u0026rdquo; Click \u0026ldquo;Next\u0026rdquo;. Click \u0026ldquo;Create Network Access Scope\u0026rdquo;. From the Network Access Scopes screen: Select the row containing the scope you just created. Select \u0026ldquo;Analyze\u0026rdquo;. The analysis will take a few minutes to complete. Once finished, you will be able to click to view the results. The left panel shows a summary of the findings. The diagram on the right side of the screen provides a detailed analysis of the network traffic path to the EC2 instance. The left panel can be scrolled and column sizes adjusted to view details of allowed TCP traffic. Click on the hop points in the diagram on the right to view detailed information about the source. The analysis shows the EC2 instance receiving SSH traffic from the internet from two addresses: 203.0.113.0/24 (IPv4) and 2001:db8::/32 (IPv6). The final part of the lab is to remove the SSH rules from the security group. Note: Don\u0026rsquo;t worry - your instance has not been exposed to the Internet during this workshop! These two network ranges are actually non-routable on the Internet; see RFC 5735 for IPv4 and RIPE\u0026rsquo;s IPv6 reference card for IPv6.\nRemove SSH Security Group Rules Now that we have identified the incoming SSH access, we should remove it from the security group.\nNavigate to the VPC console, then find the LabVpc/publicInstanceSG security group. Click on the \u0026ldquo;Inbound rules\u0026rdquo; tab and select \u0026ldquo;Edit inbound rules\u0026rdquo;. Note that although Network Access Analyzer currently only works with IPv4, you may find that an SSH rule has also been configured for IPv6.\nSelect \u0026ldquo;Delete\u0026rdquo; for both the IPv4 and IPv6 rules, then select \u0026ldquo;Save rules\u0026rdquo;. Now: Return to Network Access Analyzer. Re-run the analysis for the created scope. Result: No findings (as there is no other way for Internet traffic to reach the instances, except through WebAlb). Congratulations on completing Lab C!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/4-network-analysis/4.1-labc/",
	"title": "Lab C: Analysing VPC Network Configuration",
	"tags": [],
	"description": "",
	"content": "Objective After detecting suspicious DNS traffic in LabVpc, we need to check the security configuration to identify which VPC resources can receive connections from the internet. The goal is to ensure these resources meet compliance and security requirements. If unwanted access is detected, we will need to remove it. Starting Point AWS provides tools to help us identify and visualize allowed access to our VPC based on the current configuration, instead of manually checking each security group and Network ACL configuration in large environments. Services Used Amazon VPC Network Access Analyzer - Documentation Success Criteria Identify VPC access controls that allow unwanted connections (e.g., SSH port open to the Internet) into the VPC and remove this access. Tips To find insights about network access configuration\nNetwork Access Analyzer can be found in the Network Manager console. While you can use AWS\u0026rsquo;s default scope, you may get many results unrelated to the lab. Consider how you can narrow the scope to LabVpc. If you want a long-term goal, also consider how you can exclude \u0026ldquo;known good\u0026rdquo; traffic from the analysis. Note that (as of November 2023), Network Access Analyzer only supports IPv4 analysis.\nLab C Architecture Lab C Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/4-network-analysis/4.2-labd/4.2.1-wd/",
	"title": "Lab D Guide: Mirroring VPC network traffic",
	"tags": [],
	"description": "",
	"content": "Make sure you are in the correct region Navigate to the AWS Console homepage. Ensure you are working in the correct region. Configure the mirror target Record the ENI ID of mirrorInstance from the Lab D CloudWatch Dashboard to use as the mirror target. From the console homepage, click on the search box and type VPC. From the VPC console, select the \u0026ldquo;Mirror targets\u0026rdquo; option in the menu, then select \u0026ldquo;Create traffic mirror target”. Add a name and description for the target, select the target type as \u0026ldquo;Network Interface\u0026rdquo; and choose the pre-identified ENI, then click \u0026ldquo;Create\u0026rdquo;. Configure the mirror filters Record the private IP addresses (IPv4 and IPv6) of the EC2 mirrorInstance and use this information when creating the mirror filter rules, with information obtained from the Lab D CloudWatch Dashboard. From the VPC console, select the \u0026ldquo;Mirror filters\u0026rdquo; option in the menu, then click the filter ID link of the pre-created filter (named \u0026ldquo;LabDMirrorFilter\u0026rdquo;) to edit it. Four rules have already been configured; two inbound rules deny (do not mirror) HTTPS response traffic from the VPC CIDR block (both IPv4 and IPv6) to publicInstance; and two outbound rules deny HTTPS request traffic from publicInstance to the VPC CIDR block (both IPv4 and IPv6). This is to eliminate some noise for the purpose of the demo. We will add four more rules; two outbound rules to accept (mirror) HTTPS requests from publicInstance to the Internet (IPv4 and IPv6), and two inbound rules to accept HTTPS responses from the Internet (IPv4 and IPv6) to publicInstance. Access the \u0026ldquo;Outbound rules\u0026rdquo; tab and click \u0026ldquo;Add outbound rule\u0026rdquo; to add the outbound rules. Keep the rule number as 210 (we want this rule to execute after the existing rules), keep the rule action as \u0026ldquo;accept\u0026rdquo;. Set the protocol to TCP and set the source port range to 1024-65535, and the destination port range to 443. Enter the private IPv4 address (with /32 at the end) of publicInstance in the source CIDR block field, then add 0.0.0.0/0 to the destination CIDR block field, then click \u0026ldquo;Add rule\u0026rdquo;. Add a second outbound rule (this time for IPv6). Keep the rule number as 310, keep the rule action as \u0026ldquo;accept\u0026rdquo;. Set the protocol to TCP and set the source port range to 1024-65535, and the destination port range to 443. Enter the private IPv6 address (with /128 at the end) of publicInstance in the source CIDR block field, then add ::0/0 to the destination CIDR block field, then click \u0026ldquo;Add rule\u0026rdquo;. Click on the \u0026ldquo;Inbound rules\u0026rdquo; tab and select \u0026ldquo;Add inbound rule\u0026rdquo; to create the inbound rules. To create the inbound rule, keep the rule number as 210 (we want this rule to run after the existing rules), keep the rule action as \u0026ldquo;accept\u0026rdquo;. Set the protocol to TCP, and set the source port range to 443, and the destination port range to 1024-65535. Enter 0.0.0.0/0 in the source CIDR block field, and then add the private IPv4 address (with /32 at the end) of publicInstance in the destination CIDR block field, then click \u0026ldquo;Add rule\u0026rdquo;. Keep the rule number as 310 (we want this rule to run after the existing rules), keep the rule action as \u0026ldquo;accept\u0026rdquo;. Set the protocol to TCP, and set the source port range to 443, and the destination port range to 1024-65535. Enter ::0/0 in the source CIDR block field, and then add the private IPv6 address (with /128 at the end) of publicInstance in the destination CIDR block field, then click \u0026ldquo;Add rule\u0026rdquo;. Configure the mirror session Record the ENI ID of publicInstance and the Virtual Network ID (308308) from the Lab D CloudWatch Dashboard to use when registering as the mirror source. From the VPC console, select the \u0026ldquo;Mirror session\u0026rdquo; option in the menu, then click the \u0026ldquo;Create traffic mirror session\u0026rdquo; button. Set the name and description for the session, select the mirror source as the ENI of publicInstance and the mirror target as the target you created earlier. Set the Session number to 1, VNI to \u0026ldquo;308308\u0026rdquo;, leave the packet length blank, select the updated filter, and click \u0026ldquo;Create\u0026rdquo;. View the packet captures Connect to mirrorInstance via Session Manager using the link in the Useful Links section of the Lab D CloudWatch Dashboard. Connect to mirrorInstance, switch to root privileges using the command sudo bash, and check the network interfaces using the command ifconfig -a to confirm that the vxlan0 interface has been configured. You can run the command: tshark -i vxlan0 -Y http -T fields -e ipv6.src -e ipv6.dst -e http.request.method -e http.request.uri -e http.file_data To view the mirrored HTTP packet data over IPv6 to mirrorInstance. Let the command run for about a minute to see the traffic, and press Ctrl-C to stop when enough data has been captured. 4. You will see some packets transmitted in clear text instead of being encrypted. \u0026ldquo;publicInstance\u0026rdquo; is using port 443 for unencrypted HTTP connections, and in Labs E and F, we will explore how to configure AWS Network Firewall to automatically detect this traffic.\nCongratulations on completing Lab D!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.1-labe/5.1.1-we/",
	"title": "Lab E Guide: Setting the routing for AWS Network Firewall",
	"tags": [],
	"description": "",
	"content": "Make sure you are in the correct region Navigate to the AWS Console homepage. Ensure you are working in the correct region. NFW routing for IPv6 Objective: Ensure that all ingress and egress traffic is inspected by AWS Network Firewall before reaching public and private subnets. Work done: Configured a firewall subnet with AWS Network Firewall deployed. Next steps: Modify the IPv6 route tables to ensure all ingress and egress traffic passes through the Network Firewall. This is how the route tables will handle the configuration afterwards Note: When you add Network Firewall endpoints to a VPC, they appear as Gateway Load Balancer endpoints (technically, AWS Network Firewall uses Gateway Load Balancer). The CloudWatch dashboard will help you identify the correct endpoint IDs.\nAdd default route via IGW to the FW route tables In the AWS Management Console, start typing VPC into the quick search box and press Enter: Go to VPC → Route Tables and filter by LabVpc in the left box. Select LabVpc/FwSubnet1RouteTable and click on the Routes tab. Click on Edit Routes Add a route and configure it so that all traffic must go through the internet gateway. Destination: ::/0 Target: igw-xxxx.. Now, repeat steps 1 to 4 for the \u0026ldquo;LabVpc/FwSubnet2RouteTable\u0026rdquo;. Create and Configure Edge Route Table Go to VPC → Route Tables and click on Create route table in the top right corner. Name: LabVpc/Edge VPC: vpc-xxx (LabVpc) Click on Create route table. Click on Edit on routes Add 2 new routes\nDestination: Check CloudWatch Dashboard for Public Subnet CIDR (IPv6) in AZ1 Target: Check CloudWatch Dashboard for NFW Endpoint ID in AZ1 Destination: Check CloudWatch Dashboard for Public Subnet CIDR (IPv6) in AZ2 Target: Check CloudWatch Dashboard for NFW Endpoint ID in AZ2 As a best practice, routing from a subnet should go through the GWLB endpoint in the same Availability Zone (AZ). Go to the Lab E CloudWatch Dashboard to check the correct GWLB endpoint for each subnet.\nYou will see two new routes with the VPC Network Firewall GWLB endpoint as the target. On the Edge associations tab, click on Edit edge association Then select Internet Gateway and Save Changes\nModify Public subnets route tables Go to VPC → Route Tables and filter by LabVpc. Select LabVpc/PubSubnet1RouteTable and click on the Routes tab. Click on Edit Routes. We need to modify the ::/0 rule. Remove the IGW as the target and click on Gateway Load Balancer Endpoint. As a best practice, the selected endpoint needs to be in the same AZ as the subnet the route table is associated with. Go to the Lab E CloudWatch Dashboard to check the correct GWLB endpoint for each subnet. Add a route and now configure it so that all traffic must go to the Network Firewall before leaving the VPC Destination: ::/0 Target: vpce-xxxx This is how your route table will look. Please note that we are only configuring routes for IPv6, so IPv4 still points to the IGW, while IPv6 points to the NFW endpoint.\nNow, repeat steps 1-4 for LabVpc/PubSubnet2RouteTable. Congratulations on completing Lab E!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.1-labe/",
	"title": "Lab E: Setting the routing for AWS Network Firewall",
	"tags": [],
	"description": "",
	"content": "Objective You need to configure a firewall to inspect all suspicious IPv6 traffic entering and leaving the LabVpc network due to reports of unusual activity. Starting Point You need to configure the route tables to ensure that traffic entering and leaving the VPC passes through the AWS Network Firewall endpoints in the FwSubnets for inspection. Infrastructure AWS Network Firewall (with endpoints in each AZ). LabVpc/FwSubnet1 \u0026amp; LabVpc/FwSubnet2 (one in each AZ). Services Used Amazon VPC - Route Tables Documentation AWS Network Firewall Documentation\nSuccess Criteria Configure the IPv6 route tables for the VPC to ensure that all ingress/egress traffic is inspected by AWS Network Firewall. Ensure that the firewall endpoints are correctly associated with the VPC and relevant subnets. Verify internet access from publicInstance after updating the route tables. Tips Working with IPv6\nIf you haven\u0026rsquo;t worked with IPv6 before, here are a few things to remember:\nThe default route for IPv6 is ::/0 (equivalent to 0.0.0.0/0 for IPv4). When allocating an IPv6 CIDR block to a VPC, the VPC receives a /56 public IPv6 address block; each subnet receives a /64 allocation from this block. Working with VPC routing\nTo configure routing in the VPC, think about each hop of the packet from source to destination. The next hop is determined by the routes in the subnet\u0026rsquo;s route table. Ask AWS staff if you encounter difficulties. Ingress Route table Configure the Ingress Route table Ingress Routing\nLab E Architecture Lab E Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/6-gwlb/6.1-labg/6.1.1-wg/",
	"title": "Lab G Guide: Configuring Gateway Load Balancer Service",
	"tags": [],
	"description": "",
	"content": "We want to set up an AWS Gateway Load Balancer (GWLB) to inspect all ingress and egress traffic before it reaches public and private subnets. To do this, we need to create a GWLB in the GWLB VPC, and this GWLB will point to the AutoScaling Group (ASG) running Suricata. After this configuration, the route tables will be updated to ensure all traffic passes through the GWLB. Create Target Group In the AWS Management Console, type \u0026ldquo;EC2\u0026rdquo; into the quick search box and press Enter: Go to Load Balancing → Target Group and click Create Target Group. Under Basic configuration: Choose a target type: Instances Target group name: netvpc-TG-GWLB Protocol: Port: GENEVE VPC: GwlbVpc In Health check protocol - choose HTTP and set / under the path. Click Next. In the Available instances section, do not select anything, then click Create target group. Click Create target group. Create Gateway Load Balancer In the AWS Management Console, start typing \u0026ldquo;EC2\u0026rdquo; into the quick search box and press Enter. Go to Load Balancing → Load Balancer and click Create load balancer. Select Gateway Load Balancer and click Create. Set up the following details: Load balancer name: GWLB IP address type: IPV4 VPC: GwlbVpc Subnets: GwlbVpc/PriSubnet1 \u0026amp; GwlbVpc/PriSubnet2 IP listener routing: netvpc-TG-GWLB (the one created in the previous step) Click Create load balancer Associate the ASG with the Gateway Load Balancer In the AWS Management Console, start typing EC2 into the quick search box and press Enter: Click on Autoscaling Groups in the left menu. Click on netwks-SuricataAutoScalingGroup. In the Details tab, scroll down to the Load balancing section and click Edit. Scroll down to the Load balancers section: Click on Application, Network or Gateway Load Balancer target groups. Select the GWLB created in the previous step. Click Update Create GWLB Endpoint Service Go to VPC → Endpoint Services and click Create endpoint service in the top right corner. Name: GWLB-Endpoint Load balancer type: Gateway Available load balancers: GWLB (load balancer created in the previous step) Acceptance required: should be un-ticked Supported IP address types: IPv4 Click Create. After creation, copy the service name into a note-taking application; you will need it for the next lab. Congratulations on completing Lab G!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/6-gwlb/6.1-labg/",
	"title": "Lab G: Configuring Gateway Load Balancer Service",
	"tags": [],
	"description": "",
	"content": "Objective Your security team has created a Gateway Load Balancer VPC (GwlbVpc) and installed Suricata, an open-source firewall on an ECS cluster. Your task now is to configure the Gateway Load Balancer service, ready for use in LabVpc in Lab H. Pre-deployed Infrastructure You will find an auto-scaling group (netwks-Suricata\u0026hellip;) connected to an Elastic Container Service (ECS) cluster running the Suricata firewall. These components have been deployed into a separate VPC (GwlbVpc). Services Used AWS Gateway Load Balancer and Amazon VPC Success Criteria You have created a target group using the GENEVE protocol (the protocol used by AWS Gateway Load Balancer - GWLB). You have successfully configured the AWS Gateway Load Balancer in the GWLB VPC. You have successfully associated the auto-scaling group (ASG) with the GWLB. You have successfully created a GWLB endpoint service. Tips Create Gateway Load Balancer\nConfigure the Gateway Load Balancer GWLB Create GWLB Endpoint Service\nCreate an endpoint service using your Gateway Load Balancer Endpoint to the relevant subnets. Lab G Architecture Lab G Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/6-gwlb/6.2-labh/6.2.1-wh/",
	"title": "Lab H Guide: Configuring Routing for Gateway Load Balancer",
	"tags": [],
	"description": "",
	"content": "Configuring Create GWLB Endpoint: Create a GWLB endpoint in each Firewall (FW) subnet in LabVpc to redirect traffic. Update route tables: Modify the route tables to ensure all traffic to or from the IGW is inspected by the Suricata firewall. The Suricata firewall has been pre-configured with two rules: The first rule blocks traffic to https://www.facebook.com. The second rule blocks ICMP ping to 9.9.9.9.\nCreate Endpoint in LabVpc Go to VPC -\u0026gt; Endpoints and click create Endpoint Name: GWLB-endpoint-1 Service Category: Other Endpoint services Service Settings: paste the GWLB\u0026rsquo;s service name created in the previous lab. If you did not note down your endpoint name, click the link here and check the service name in the Details tab.\nClick \u0026ldquo;Verify Service\u0026rdquo;. It will display a confirmation message for the service name. Check Subnet After confirmation, you will have the option to select the VPC. VPC: Select LabVpc. Subnets: Select LabVpc/FWSubnet1. Click Create Although you can select multiple subnets at this step, each GWLB endpoint can only be associated with a single subnet. Therefore, you need to create two GWLB endpoints, one for each AZ.\nRepeat the above steps for the LabVpc/FWSubnet2 subnet Go to VPC -\u0026gt; Endpoint Services. Click on GWLB-Endpoint. Select the \u0026ldquo;Endpoint connections\u0026rdquo; tab. Select the endpoint you want to accept the connection request for. Click \u0026ldquo;Actions\u0026rdquo; and select \u0026ldquo;Accept endpoint connection request\u0026rdquo;. Add default route via IGW to the FW route tables This is how the route tables will handle the configuration afterward: In the AWS Management Console, start typing \u0026ldquo;VPC\u0026rdquo; into the quick search box at the top and press Enter. Go to VPC → Route Tables and filter by LabVpc. Select LabVpc/FwSubnet1RouteTable and click on the Routes tab. Click Edit Routes. Add a route and configure it so that all traffic should go to the internet gateway. Destination: 0.0.0.0/0 Target: igw-xxxx.. Repeat the above steps for LabVpc/FwSubnet2RouteTable Congratulations on completing Lab H!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/7-waf/7.1-labi/7.1.1-wi/",
	"title": "Lab I Guide: Protecting Web Applications",
	"tags": [],
	"description": "",
	"content": "Ensure You Are in the Correct Region Navigate to the AWS Console Home. Ensure you are working in the correct region. Adding a CloudFront Global Prefix List to the WebAlb Go to VPC. Select \u0026ldquo;Managed prefix lists\u0026rdquo;. Find the \u0026ldquo;Managed prefix lists\u0026rdquo; with the following line: com.amazonaws.global.cloudfront.origin-facing Note down the last few characters of the prefix list ID (you will need this later) - in this example, it is 4526. From VPC, go to Security Groups. Select the box next to \u0026ldquo;LabVpc/webAlbSG\u0026rdquo; in the security group. Select the \u0026ldquo;Inbound rules\u0026rdquo; tab in the lower panel, then click \u0026ldquo;Edit inbound rules\u0026rdquo;. Click \u0026ldquo;Add rule\u0026rdquo;. Type: HTTP Source: Custom then click the search box Find the \u0026ldquo;Prefix lists\u0026rdquo; with characters like in this example 4526. Select it, then add an optional description - in this example, \u0026ldquo;Inbound TCP:80 from CloudFront\u0026rdquo;. Click \u0026ldquo;Save rules\u0026rdquo;. Confirm that your rule is in the Inbound rules list. Configuring AWS WAF From the main console page, click the search box and type \u0026ldquo;WAF\u0026rdquo;. From the WAF console: select the \u0026ldquo;Web ACLs\u0026rdquo; option from the left menu. Ensure you are in the correct region. Click \u0026ldquo;Create web ACL\u0026rdquo;. Step 1: Web ACL Name: \u0026ldquo;netwks-webacl\u0026rdquo; Description: As desired CloudWatch metric name: \u0026ldquo;netwks-webacl\u0026rdquo; Resource type: Regional resources Region: Ensure it is the region you are working in. Click \u0026ldquo;Next\u0026rdquo; to continue. Step 2: Add a new rule. From the Rules section, click \u0026ldquo;Add rules\u0026rdquo;. Select \u0026ldquo;Add my own rules and rule groups\u0026rdquo;. This will take you to the \u0026ldquo;Add my own rules and rule groups\u0026rdquo; screen. Ensure the \u0026ldquo;Rule builder\u0026rdquo; option is selected. Add a name for the rule (e.g., \u0026ldquo;netwks-rule01\u0026rdquo;). Ensure the rule is a \u0026ldquo;regular rule\u0026rdquo;. Continue building the rule: Configure the rule to trigger when the request \u0026ldquo;matches the statement\u0026rdquo;. Choose to inspect a header, and enter \u0026ldquo;originsig\u0026rdquo; as the header field name. Select the match type as \u0026ldquo;Exactly matches string\u0026rdquo;, and provide \u0026ldquo;vpcsecurity\u0026rdquo; as the string to match. Ensure the text transformation is set to \u0026ldquo;Lowercase\u0026rdquo;. Final part of the rule: Select \u0026ldquo;Allow\u0026rdquo; as the action, and leave the other parts at their default values. Click \u0026ldquo;Add rule\u0026rdquo; to return to the Step 2 page. Here, configure the default action of the Web ACL: Block any requests that do not match the rule. Optional: Configure a custom response code and message. For example, use HTTP response code 403 and choose to create a custom response body. Custom response body: You can return JSON, HTML, or plain text. For example, create a custom response body called \u0026ldquo;netwks-denied\u0026rdquo;, returning an HTML response with the message: \u0026lt;strong\u0026gt;Invalid CloudFront distribution used to request this resource\u0026lt;/strong\u0026gt;. Click \u0026ldquo;Save\u0026rdquo; and complete Step 2 by clicking \u0026ldquo;Next\u0026rdquo;. Next steps: Step 3: With only one rule, no need to change the priority. Click \u0026ldquo;Next\u0026rdquo;. Step 4 (Configure metrics): Leave the default options unchanged and click \u0026ldquo;Next\u0026rdquo;. Step 5: Review the configured options and click \u0026ldquo;Create web ACL\u0026rdquo;. AWS WAF may take a few minutes to complete the necessary tasks - do not leave the page while this process is ongoing. Next step: To associate the web ACL with a resource, from the Web ACL list, click the name \u0026ldquo;netwks\u0026rdquo; to view the Web ACL details page. In the \u0026ldquo;Associated AWS resources\u0026rdquo; tab, click \u0026ldquo;Add AWS resources\u0026rdquo;. Next step: Select \u0026ldquo;Application Load Balancer\u0026rdquo;, then select \u0026ldquo;WebAlb\u0026rdquo; and click \u0026ldquo;Add\u0026rdquo;. This may take a minute or two to complete. Once done, you can test the web ACL by accessing the two different CloudFront distributions created. Congratulations on completing Lab I!\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/7-waf/7.1-labi/",
	"title": "Lab I: Protecting Web Applications",
	"tags": [],
	"description": "",
	"content": "Objective Protect WebAlb: Ensure that all traffic to WebAlb (Application Load Balancer) only comes from an Amazon CloudFront distribution, not from other users (except from your personal computer). Limit traffic from specific CloudFront: Only allow traffic from a specific CloudFront distribution to access WebAlb, rather than any CloudFront distribution that might know about WebAlb. Starting Point Ensure Traffic to WebAlb Only from CloudFront: Consider methods to ensure that all traffic to WebAlb only comes from CloudFront infrastructure. Use AWS WAF to Inspect L7 Traffic: After ensuring traffic only comes from CloudFront, consider using AWS WAF to inspect Layer 7 (L7) traffic and verify that requests come from the CloudFront distribution you control. Pre-deployed Infrastructure Application Load Balancer (WebAlb): An Internet-facing Application Load Balancer listening on HTTP port 80. Behind WebAlb are several EC2 instances serving content. Amazon CloudFront distribution: Configured to insert a custom HTTP header into requests it sends to the origin infrastructure (WebAlb). Second CloudFront distribution: Not configured to insert a custom header (used for control and demo purposes). Note: The CloudFront distributions will initially return a 504 error, which is normal and will be resolved after completing the first task.\nServices Used Amazon CloudFront - Documentation AWS Web Application Firewall (WAF) - Documentation Amazon VPC Security Groups Success Criteria Ensure that the Application Load Balancer (WebAlb) is accessible from the Amazon CloudFront distributions and from your laptop. Additionally, ensure that WebAlb can only be accessed from the Amazon CloudFront distribution containing the custom HTTP header. Tips Restricting traffic to CloudFront distributions\nCloudFront has nodes globally, and their IP addresses can be found online here. Previously, users had to manually add these IP addresses to the security group. AWS now provides a managed prefix list, which automates this process. Filtering by HTTP header on the WebAlb Application Load Balancer\nCloudFront is configured to insert the \u0026ldquo;OriginSig\u0026rdquo; header into requests to the ALB. ALB cannot filter traffic by header but can be associated with AWS WAF [here]. Create a rule in AWS WAF to block traffic without the \u0026ldquo;OriginSig\u0026rdquo; header [here]. Lab I Architecture Lab I Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/1-introduce/",
	"title": "Workshop Overview",
	"tags": [],
	"description": "",
	"content": "Approach The workshop revolves around Amazon VPC architecture with challenges based on real-world scenarios. Each challenge (Lab) provides objectives, starting points, and suggested services. There are hints and detailed instructions if needed. Each Lab has its own CloudWatch dashboard, containing additional instructions and links to deployed resources. The top right corner of the dashboard shows the number of tasks completed. You must complete all tasks of the first Lab before moving on to the next Lab. Note: If there are warnings about custom widgets when loading the dashboard, click \u0026ldquo;Execute them all\u0026rdquo; to track progress. Workshop Structure Group: DNS Security\nLab A: Enhance VPC Activity Visibility Lab B: Deploy DNS Firewall Group: Network Analysis\nLab C: Analyze VPC Network Configuration Lab D: Mirror VPC Network Traffic Group: AWS Network Firewall\nLab E: Configure Routing for Network Firewall Lab F: Configure AWS Network Firewall Rules Group: Third-Party Firewall Using Gateway Load Balancer (GWLB)\nLab G: Configure Gateway Load Balancer Service Lab H: Configure Routing for Gateway Load Balancer Group: Web Application Firewall\nLab I: Protect Web Applications Content Architecture Introductory Task: Managing VPC Access Control at Scale Detailed Walkthrough "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/1-introduce/1.2-introtask/",
	"title": "Introductory Task: Managing VPC Access Control at Scale",
	"tags": [],
	"description": "",
	"content": "Objective: Before starting the labs, you need to configure security controls for your VPC so that the WebAlb load balancer can receive HTTP/HTTPS requests from your laptop\u0026rsquo;s internet connection. This workshop uses managed prefix lists in VPC to help you achieve this. IPv6 has been enabled on some deployed resources, and although your computer may not be configured to connect via IPv6, we have included an option to allow IPv6 connections if available.\nNote that in many cases, traffic may not come from your computer\u0026rsquo;s actual IP address but from an HTTP or NAT gateway of the connecting network. We call this the \u0026ldquo;Gateway IP Address,\u0026rdquo; and this address will differ for IPv4 and IPv6.\nStarting Point: Your goal in this lab is to update your VPC security controls so that the WebAlb load balancer can receive HTTP traffic (TCP port 80) from the Gateway IP address. We have added rules to some of WebAlb\u0026rsquo;s security groups referencing VPC prefix lists to address this. After adding your Gateway IP address to the correct managed prefix list, you will be able to browse from your computer to the WebAlb load balancer. Pre-deployed Infrastructure The following resources have been pre-deployed to assist you:\nWebAlb Load Balancer (\u0026ldquo;webAlb\u0026rdquo;): Includes a few EC2 instances behind it, providing some useful information. Security Group for WebAlb (\u0026ldquo;LabVpc/webAlbSG\u0026rdquo;): Contains inbound rules for \u0026ldquo;workshopPrefixListIPv4\u0026rdquo; and \u0026ldquo;workshopPrefixListIPv6\u0026rdquo;. Managed Prefix List for VPC (IPv4) (\u0026ldquo;workshopPrefixListIPv4\u0026rdquo;): This list is currently empty. For IPv4, use CIDR format like x.x.x.x/32. Managed Prefix List for VPC (IPv6) (\u0026ldquo;workshopPrefixListIPv6\u0026rdquo;): This list is also currently empty. For IPv6, use the format xxxx:xxxx:xxxx:xxxx::/128. You can find links to WebAlb and CloudFront endpoints on the introductory CloudWatch dashboard.\nServices Used: Amazon VPC Managed Prefix Lists: Description: Managed prefix lists in Amazon VPC allow you to create and manage lists of CIDR blocks that you can reference in security group rules and route tables. Documentation: Amazon VPC Managed Prefix Lists Documentation Amazon VPC Security Groups: Description: Security groups in Amazon VPC act as virtual firewalls to control inbound and outbound traffic to Amazon EC2 resources in the VPC. Documentation: Amazon VPC Security Groups Documentation AWS CheckIp: Description: A simple AWS service that allows you to check your public IP address, helping to identify the Gateway IP address you need to add to the prefix list. Website: AWS CheckIp Tips: What are Prefix lists?\nPrefix lists are collections of CIDR blocks that simplify the configuration and management of security groups and route tables. Instead of referencing individual IP addresses, you can use prefix lists to group commonly used IP addresses into a set and apply them in security or routing rules. This helps consolidate rules with the same port and protocol but different CIDRs into a single rule. Reference Documentation Finding your Gateway IP address\nTo restrict access to your laptop, you need to find the \u0026ldquo;gateway\u0026rdquo; IP address that your network uses to connect to the internet, which can be done via the AWS CheckIp website. This address is a single IP, and to turn it into a valid CIDR range, you need to add /32 at the end. If you cannot find it, you can use 0.0.0.0/0 (IPv4) or ::/0 (IPv6) to allow access from anywhere, but this is a last resort. Managing your own prefix lists\nAmazon VPC allows you to create and manage your own prefix lists, which can be referenced in other VPC constructs like security groups and route tables. You can use the existing prefix lists \u0026ldquo;workshopPrefixListIPv4\u0026rdquo;, add your gateway IP address to it, and use it to control access through the WebAlb security group (\u0026ldquo;LabVpc/webAlbSG\u0026rdquo;). Introductory task completed architecture\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/3-dns-security/3.2-labb/",
	"title": "Lab B: Implementing a DNS firewall",
	"tags": [],
	"description": "",
	"content": "Overview: Identify the suspicious website: \u0026ldquo;bad.sa-demos.net\u0026rdquo; is the target of much traffic. Next task: Block this website to prevent access while continuing the investigation. Solution: Deploy and configure mechanisms to prevent instances in the VPC from resolving that domain name. The goal is to temporarily block access to the suspicious domain from the VPC to ensure safety during the investigation.\nStarting Point: There are several approaches to deny access to the suspicious domain, such as VPC security groups or network ACLs, but they only block traffic to specific IP addresses. If the malicious website switches to another IP address, these blocks will become ineffective. Instead, in this lab, we will use a DNS firewall to prevent resources in the VPC from resolving the IP address of the suspicious domain. The goal is to use the DNS firewall to effectively block the domain name, regardless of IP changes.\nServices Used Amazon Route 53 Resolver DNS Firewall - Documentation Amazon CloudWatch Log Insights - Documentation Success Criteria Instances in LabVpc can no longer successfully resolve the IP address of the suspicious domain you identified in Lab A (bad.sa-demos.net). The Lab B CloudWatch Dashboard will show your progress. Note that attempts to query the suspicious domain will return an NXDOMAIN response. Tips To enable and configure the DNS firewall The DNS firewall can be found in the Amazon Route 53 Resolver section of the AWS console. The process is:\nCreate a domain list containing the suspicious domain bad.sa-demos.net. Create a rule group to BLOCK (using NXDOMAIN response) requests to the domain list you created above. Associate the rule group with LabVpc. To analyze query logs You can check if DNS requests are being blocked in several ways:\nThrough CloudWatch Log Insights. Connect to publicInstance and use nslookup bad.sa-demos.net. Lab B CloudWatch Dashboard. Lab B Architecture Lab B Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/4-network-analysis/4.2-labd/",
	"title": "Lab D: Mirroring VPC network traffic",
	"tags": [],
	"description": "",
	"content": "Objective Further investigate the publicInstance exposed to the Internet. Inspect HTTP requests on TCP port 443 to detect suspicious activity. Consider both IPv6 and IPv4 traffic. Starting Point VPC traffic logs only provide information about traffic at the flow level. AWS provides tools to capture and analyze packets from Elastic Network Interfaces. Pre-deployed Infrastructure The EC2 instance mirrorInstance has been configured to receive packets for analysis. Use network ID 308308 for VXLAN encapsulation. A mirror filter has been pre-created to exclude internal VPC traffic. Additional rules need to be added to the filter to mirror HTTPS (TCP:443) traffic and its responses from the internet. Services Used Amazon VPC Traffic Mirroring - Documentation Success Criteria: Configure mirrorInstance as a mirror target for VPC traffic mirroring.\nAdd additional rules to the pre-created mirror filter to include:\nTraffic sent to the Internet (Destination TCP port 443) from publicInstance (including both IPv4 and IPv6 traffic). Traffic returned from the Internet (Source TCP port 443) to publicInstance (including both IPv4 and IPv6 traffic). Note: IPv4 and IPv6 require separate rules in the mirror filter. Create a mirror session to start capturing packets and sending them to mirrorInstance.\nInstructions for connecting and using tshark:\nConnect to mirrorInstance: Use Session Manager to connect to mirrorInstance. Run the tshark command: Open a terminal and run the following command to view the mirrored traffic: sudo tshark -i vxlan0 -Y http -T fields -e ipv6.src -e ipv6.dst -e http.request.method -e http.request.uri -e http.file_data Tips Configuring a Mirror Target\nA mirror target can be EC2 instances, Network Load Balancers, or Gateway Load Balancers. In this workshop, we will use an EC2 instance as the target. The Traffic Mirroring interface requires you to specify an Elastic Network Interface (ENI) rather than directly specifying the EC2 instance. You can find the ENI ID of mirrorInstance in the Lab D CloudWatch Dashboard. Configuring a Mirror Filter\nA mirror filter helps determine what type of traffic will be mirrored to the target. You can include and/or exclude specific types of traffic (based on source/destination port, source/destination IP, protocol) through rules. The filter will process rules in the specified order, stopping when a match is found. In this lab, we want to mirror traffic leaving LabVpc to port 443 on the internet. Two rules are needed: One rule for outbound requests to port 443. One rule for responses from port 443 back to the original source port. Each rule must be specific to either IPv4 or IPv6, so a total of 4 rules are needed. Starting a Mirror Session\nEach mirror session represents a single mirror source, sending traffic matching a mirror filter to a single mirror target. Mirror filters can be reused in multiple sessions, and a mirror target can be used by multiple mirror sessions. However, a source can only be associated with a single mirror session. The mirror source is identified by the Elastic Network Interface (ENI), rather than the instance ID. You can find the ENI ID of publicInstance in the Lab D CloudWatch Dashboard. Lab D Architecture Lab D Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.2-labf/",
	"title": "Lab F: Configuring AWS Network Firewall Rules",
	"tags": [],
	"description": "",
	"content": "Objective The lab consists of 4 sub-sections:\nBlock outbound ICMP traffic. Block DNS traffic to servers outside the VPC. Block HTTP access to specific domains. Alert based on HTTP header content. Content Block outbound ICMP Drop DNS Traffic Drop specific Domains Using suricata to inspect traffic content "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/6-gwlb/6.2-labh/",
	"title": "Lab H: Configuring Routing for Gateway Load Balancer",
	"tags": [],
	"description": "",
	"content": "Objective You need to configure routing in the Lab VPC to ensure all IPv4 traffic is directed to the Suricata firewall via the Gateway Load Balancer (GWLB) endpoints. This will allow Suricata to inspect all IPv4 traffic entering and leaving through the IGW. The firewall has been pre-configured to block all traffic to https://www.facebook.com over IPv4.\nStarting Point In the previous lab, you created a GWLB (Gateway Load Balancer) Endpoint service in the GWLB VPC. Now, you need to create an endpoint in the FW Subnet of the Lab VPC. To inspect all ingress and egress traffic, you need to configure the route tables to ensure traffic passes through the AWS Gateway Load Balancer endpoints in the FwSubnets before leaving and entering the VPC. Pre-deployed Infrastructure AWS GWLB service endpoint (from the previous lab). LabVpc/FwSubnet1 and LabVpc/FwSubnet2 (one in each AZ). Note: If you have completed Lab E (NFW firewall routing configuration), one of the tasks below (associating the edge route table with the LabVpc IGW) may have already been done. You still need to add routes to this route table.\nServices Used Amazon VPC- Route Tables Documentation AWS Gateway Load Balancer - Documentation Success Criteria You have created/reused the edge route table and associated it with the LabVpc IGW. You have added a route for each IPv4 PubSubnet CIDR block to the edge route table via the GWLB endpoints. You have added a default route from each FWSubnet to the IGW. You have updated the default IPv4 routes from each PubSubnet to the GWLB endpoints. You have verified that you can still access the Internet from publicInstance Remote Access via Systems Manager Session Manager. To test this, connect and ping any public website. You have verified that you cannot access www.facebook.com from publicInstance Remote Access via Systems Manager Session Manager Lab H CloudWatch Dashboard. To test this, connect and ping any public website. Ensure all the tasks identified above have been completed. Tips Ingress Route table\nConfigure the Ingress Route table Ingress Routing How to associate a route table to a subnet\nAssociate Route table to a Subnet Associate to the relevant subnets. Multiple GWLB endpoints needed\nWhile you can select multiple subnets when creating a GWLB endpoint, each GWLB endpoint can only be associated with a single subnet. Therefore, you need to create two GWLB endpoints, one for each AZ. Lab H Architecture How to test?\nConnect to publicInstance via AWS Session Manager: Use AWS Systems Manager Session Manager to connect to publicInstance. Run the test command: Enter the following command in the publicInstance terminal: curl -v -4 https://www.facebook.com Expected result: The above command should time out, meaning the request failed because traffic to www.facebook.com is being blocked by the firewall. Lab H Guide\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/2-prepare/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Preparation Deploy the resources by creating a CloudFormation stack from the linked file here in your personal AWS account (estimated cost $1.50-$2.00 per hour). Ensure to clean up after completing the workshop to avoid incurring additional costs. Use a separate AWS account dedicated to learning and experimentation, not one containing production resources. The necessary IAM permissions for deployment and cleanup are listed here. When deploying the CloudFormation template, accept all default settings. The deployment process takes 15-20 minutes. Once the stacks show the status Create_Complete, proceed to the Workshop Overview. Note on resource costs: If using your personal AWS account, make sure to follow the cleanup steps at the end of the workshop to stop ongoing charges for services used during the workshop.\nEquipment: To complete this workshop, you will need your own laptop. It should have internet access to connect via HTTPS and HTTP.\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.2-labf/5.2.3-domains/",
	"title": "Drop specific Domains",
	"tags": [],
	"description": "",
	"content": "Detailed Instructions AWS Network Firewall: Uses two rule engines to inspect packets. Task: Create a Stateless rule to forward all traffic to the Stateful engine. Go to the VPC Console and in the left menu, select Firewall policies under Network firewall. You will find an NFWPolicy, created in the initial setup. Click on it and go to Stateless rule groups, click on Actions -\u0026gt; Create stateless rule group. In step 1 - click Next. In step 2, enter the following values: Name: FwdToStateful Capacity: 100 Click Next Under Add rule Priority: 3 Protocol: Leave All selected Source: Any IPv6 address Destination: Any IPv6 address scroll down Rule action: Forward to stateful rule groups Ensure DropPingRule has priority 1, DropDNS has priority 2, and FwDtoStateful has priority 3. Scroll down to the Stateful rule groups section and click on Actions -\u0026gt; Create stateful rule group. Select Domain list as the rule group format In step 2, enter the name and Capacity = 100. In step 3, complete as follows: Domain: www.amazon.com CIDR Range: Default Protocol: HTTP and HTTPS Action: Deny Click Next You will see 3 Stateless rules and 1 Stateful rule. This will not return any responses. "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/3-dns-security/",
	"title": "Track: DNS Security",
	"tags": [],
	"description": "",
	"content": "Lab Overview: Lab A: You have received a report from a third party about suspicious activity coming from a part of your infrastructure. Your first task is to enable DNS query logging to capture these requests - this will help identify both the source and destination of the queries.\nLab B: After identifying requests from your VPC to a suspicious website, the next task is to block it. You will look at how Amazon Route 53 DNS Firewall can prevent resources in the VPC from resolving the IP address of this suspicious domain. Note: Occasionally, you may see the AWS console revert to the US East (N Virginia) region, especially when working with Route 53; make sure to switch back to the US West (Oregon) region (or the region you are instructed to work in).\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/4-network-analysis/",
	"title": "Track: Network Analysis",
	"tags": [],
	"description": "",
	"content": "Lab Overview: Lab C: Identify which VPC resources can receive connections from the internet to check for compliance and security. If unwanted access is detected, remove it.\nLab D: Further inspect the traffic sent from VPC resources exposed to the internet to determine if there is any suspicious traffic.\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.2-labf/5.2.4-suricata/",
	"title": "Using Suricata to inspect traffic content",
	"tags": [],
	"description": "",
	"content": "Detailed Instructions Rules: AWS Network Firewall uses two engines (stateless and stateful) to inspect packets. Note: Ensure there is a stateless rule to forward traffic to the stateful engine. Alert based on content header User Agent In the left menu, go to Firewall policies under Network firewall. You will find NFWPolicy, created as part of the initial setup. Click on it and go to Stateful rule groups, click on Actions -\u0026gt; Create stateful rule group. Select Suricata compatible rule string, and click Next. Enter the following values: Name: Suricata-Detect-User-Agent Capacity: 100 Add under Suricata compatible rule string drop http $HOME_NET any -\u0026gt; $EXTERNAL_NET any (msg:\u0026#34;ET USER_AGENTS Suspicious User-Agent (IE/1.0)\u0026#34;; flow:established,to_server; threshold: type limit, count 2, track by_src, seconds 300; http.user_agent; content:\u0026#34;IE/1.0\u0026#34;; sid:333;) Testing Since we have configured the rule to *drop traffic, this request will time out. "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/",
	"title": "Track: AWS Network Firewall (IPv6)",
	"tags": [],
	"description": "",
	"content": "Lab Overview: Your company has decided that all IPv6 traffic will be inspected by AWS Network Firewall. Additionally, all IPv4 traffic will be inspected by a third-party open-source firewall (based on Suricata), running behind a Gateway Load Balancer (deployed into a separate VPC). Labs E and F will focus on configuring AWS Network Firewall with IPv6.\nLab E: will configure AWS Network Firewall to inspect IPv6 traffic entering and leaving the VPC. Lab F: will include tasks related to creating stateless and stateful rules in AWS Network Firewall. "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/6-gwlb/",
	"title": "Track: 3rd-party firewall using Gateway Load Balancer (GWLB)",
	"tags": [],
	"description": "",
	"content": "Lab Overview Lab G: Configure Gateway Load Balancer and Endpoint Service to deploy a third-party firewall to inspect VPC traffic.\nLab H: Set up routing in LabVpc to ensure IPv4 traffic passes through the Gateway Load Balancer endpoints.\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/7-waf/",
	"title": "Track: Web Application Firewall",
	"tags": [],
	"description": "",
	"content": "Lab Overview Lab I: To protect WebAlb (Application Load Balancer) from sudden traffic spikes or DDoS attacks, we want to ensure that all traffic to WebAlb must go through an Amazon CloudFront distribution, and not directly from end-users. The secondary objective is to ensure that only traffic from a specific CloudFront distribution is allowed, rather than any CloudFront distribution.\n"
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/8-cleanups/",
	"title": "Cleanups",
	"tags": [],
	"description": "",
	"content": "Step 1 - reverse lab changes Lab I:\nDelete resource association between the WebACL and the Application - Load Balancer Delete the WebACL that you created Lab H:\nRemove the IPv4 GWLB endpoint routes from the Public Subnets Disassociate the edge route table and delete it Delete routes in the FW route tables Remove the GWLB endpoints from the LabVpc Lab G:\nDelete the GWLBe service Remove the GWLB integration in the Suricata ASG Delete the GWLB Lab F\nDisassociate the stateful rules from the NFW policy Disassociate the stateless rules from the NFW policy Delete the stateful and stateless rule groups created during the lab Delete the NFWPolicy Lab E:\nRemove ::/0 routes to NFW from the Public Subnets Remove ::/0 routes to IGW from the FW Subnets Disassociate the edge route table and delete it Lab D:\nDelete mirror session Delete mirror filter Delete mirror target Lab C:\nDelete all of the analyses from the network access scope you created Delete the network access scope you created as part of this lab. Lab B:\nDisassociate DNS firewall rule group from LabVpc Delete the rule in the rule group Delete the rule group Delete the Domain list you created Lab A:\nStop query logging for the LabVpc Delete query logging Intro\nRemove prefix list entries from IPv4 list Remove prefix list entires from IPv6 list Step 2 - pre-CloudFormation stack removal Before you delete the CloudFormation stack, you should:\nForce Delete the Suricata ECS service Step 3 - Delete the CloudFormation stack Delete CloudFormation stack Step 4 - post-CloudFormation stack removal Empty and remove Suricata S3 bucket if needed "
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/1-introduce/1.3-walkthrough-1/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/5-network-firewall/5.2-labf/5.2.2-dns/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://orisandll.github.io/Workshop_AWS1/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]